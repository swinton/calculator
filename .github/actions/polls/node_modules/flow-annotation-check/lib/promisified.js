'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.write = exports.truncate = exports.append = exports.stat = exports.execFile = exports.exec = exports.escapeShell = undefined;

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function escapeShell(cmd) {
  return cmd.replace(/(["\s'$`\\])/g, '\\$1');
}

function exec(cmd, options) {
  return new Promise(function (resolve, reject) {
    _child_process2.default.exec(cmd, options, function (error, stdout, stderr) {
      if (error) {
        reject({ error: error, stdout: stdout, stderr: stderr });
      } else {
        resolve({ stdout: stdout, stderr: stderr });
      }
    });
  });
}

function execFile(file, args, options) {
  return new Promise(function (resolve, reject) {
    _child_process2.default.execFile(file, args, options, function (error, stdout, stderr) {
      if (error) {
        reject({ error: error, stdout: stdout, stderr: stderr });
      } else {
        resolve({ stdout: stdout, stderr: stderr });
      }
    });
  });
}

function stat(file) {
  return new Promise(function (resolve, reject) {
    _fs2.default.stat(file, function (error, stats) {
      if (error) {
        reject(error);
      } else {
        resolve(stats);
      }
    });
  });
}

function write(file, data) {
  return new Promise(function (resolve, reject) {
    _fs2.default.writeFile(file, data, function (error) {
      if (error) {
        reject(error);
      } else {
        resolve();
      }
    });
  });
}

function append(file, data) {
  return new Promise(function (resolve, reject) {
    _fs2.default.appendFile(file, data, function (error) {
      if (error) {
        reject(error);
      } else {
        resolve();
      }
    });
  });
}

function truncate(file, data) {
  return stat(file).then(function (stat) {
    var fd = _fs2.default.openSync(file, 'r+');
    _fs2.default.ftruncateSync(fd, stat.size - data.length);
  });
}

exports.escapeShell = escapeShell;
exports.exec = exec;
exports.execFile = execFile;
exports.stat = stat;
exports.append = append;
exports.truncate = truncate;
exports.write = write;