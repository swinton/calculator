'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveArgs = exports.main = exports.getParser = exports.run = undefined;

var _types = require('./types');

var _flowStatusFilter = require('./flowStatusFilter');

var _flowStatusFilter2 = _interopRequireDefault(_flowStatusFilter);

var _flowAnnotationCheck = require('./flow-annotation-check');

var _flowAnnotationCheck2 = _interopRequireDefault(_flowAnnotationCheck);

var _parser = require('./parser');

var _parser2 = _interopRequireDefault(_parser);

var _loadPkg = require('load-pkg');

var _loadPkg2 = _interopRequireDefault(_loadPkg);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _promisified = require('./promisified');

var _printStatusReport = require('./printStatusReport');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getPackageJsonArgs(root, defaults) {
  var pkg = _loadPkg2.default.sync(_path2.default.resolve(root || defaults.root));
  if (pkg && pkg['flow-annotation-check']) {
    return resolveArgs(pkg['flow-annotation-check'], defaults);
  }
  return defaults;
}

function resolveArgs(args, defaults) {
  return {
    validate: args.validate || defaults.validate, // flowlint-line sketchy-null-bool:off
    absolute: args.absolute || defaults.absolute, // flowlint-line sketchy-null-bool:off
    allow_weak: args.allow_weak || defaults.allow_weak, // flowlint-line sketchy-null-bool:off
    exclude: args.exclude || defaults.exclude,
    flow_path: args.flow_path || defaults.flow_path, // flowlint-line sketchy-null-string:off
    include: args.include || defaults.include,
    output: args.output || defaults.output,
    show_summary: args.show_summary || defaults.show_summary, // flowlint-line sketchy-null-bool:off
    list_files: args.list_files || defaults.list_files,
    html_file: args.html_file || defaults.html_file, // flowlint-line sketchy-null-string:off
    csv_file: args.csv_file || defaults.csv_file, // flowlint-line sketchy-null-string:off
    junit_file: args.junit_file || defaults.junit_file, // flowlint-line sketchy-null-string:off
    root: _path2.default.resolve(args.root || defaults.root) // flowlint-line sketchy-null-string:off
  };
}

function main(flags) {
  var command = flags.validate ? 'validate' : 'report';

  if (process.env.VERBOSE) {
    // flowlint-line sketchy-null-string:off
    console.log('Invoking:', { command: command, flags: flags });
  }

  switch (command) {
    case 'validate':
      (0, _flowAnnotationCheck.genValidate)(flags.root, flags).then(function (report) {
        return printValidationReport(report, flags);
      }).catch(function (error) {
        console.log('Validate error:', error);
        process.exitCode = 2;
      });
      break;
    default:
      (0, _flowAnnotationCheck2.default)(flags.root, flags).then(function (report) {
        return printStatusReport(report, flags);
      }).then(function (report) {
        return Promise.all([flags.html_file // flowlint-line sketchy-null-string:off
        ? saveReportToFile(flags.html_file, report, 'html-table') : null, flags.csv_file // flowlint-line sketchy-null-string:off
        ? saveReportToFile(flags.csv_file, report, 'csv') : null, flags.junit_file // flowlint-line sketchy-null-string:off
        ? saveReportToFile(flags.junit_file, report, 'junit') : null]);
      }).catch(function (error) {
        console.log('Report error:', error);
        process.exitCode = 2;
      });
      break;
  }
}

function saveReportToFile(filename, report, output) {
  if (process.env.VERBOSE) {
    // flowlint-line sketchy-null-string:off
    console.log('Saving report as ' + output + ' to ' + filename);
  }
  return (0, _promisified.write)(filename, getReport(report, output, true, (0, _flowStatusFilter2.default)('all', false)).join("\n"));
}

function getReport(report, output, showSummary, filter) {
  switch (output) {
    case 'text':
      return (0, _printStatusReport.asText)(report, showSummary, filter);
    case 'html-table':
      return (0, _printStatusReport.asHTMLTable)(report, showSummary, filter);
    case 'csv':
      return (0, _printStatusReport.asCSV)(report, showSummary, filter);
    case 'junit':
      return (0, _printStatusReport.asJUnit)(report, filter);
    default:
      throw new Error('Invalid flag `output`. Found: ' + JSON.stringify(output));
  }
}

function printStatusReport(report, flags) {
  getReport(report, flags.output, flags.show_summary, (0, _flowStatusFilter2.default)(flags.list_files, flags.allow_weak)).map(function (line) {
    return console.log(line);
  });

  var noFlowFiles = report.filter(function (entry) {
    return entry.status == 'no flow';
  });
  var weakFlowFiles = report.filter(function (entry) {
    return entry.status == 'flow weak';
  });
  var failingFileCount = flags.allow_weak ? noFlowFiles.length : noFlowFiles.length + weakFlowFiles.length;
  process.exitCode = failingFileCount ? 1 : 0;

  return report;
}

function printValidationReport(report, flags) {
  if (process.env.VERBOSE) {
    // flowlint-line sketchy-null-string:off
    console.log('All Entries');
    report.forEach(function (entry) {
      console.log((entry.isValid ? 'valid' : 'invalid') + '\t' + entry.file);
    });
    console.log('');
  }

  var invalidEntries = report.filter(function (entry) {
    return !entry.isValid;
  });
  if (invalidEntries.length > 0) {
    console.log('Invalid Entries');
    invalidEntries.forEach(function (entry) {
      console.log((entry.isValid ? 'valid' : 'invalid') + '\t' + entry.status + '\t' + (entry.threwError ? 'threw' : 'passed') + '\t' + entry.file);
    });
    process.exitCode = 1;
  }
  console.log('');
}

function run() {
  var parsed = (0, _parser2.default)().parseArgs();
  main(resolveArgs(parsed, getPackageJsonArgs(parsed.root || '', _types.DEFAULT_FLAGS)));
}

exports.run = run;
exports.getParser = _parser2.default;
exports.main = main;
exports.resolveArgs = resolveArgs;