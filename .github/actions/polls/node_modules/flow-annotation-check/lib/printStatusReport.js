'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asText = asText;
exports.asHTMLTable = asHTMLTable;
exports.asCSV = asCSV;
exports.asJUnit = asJUnit;

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function htmlPair(first, second) {
  return '<tr><td>' + first + '</td><td>' + second + '</td></tr>';
}

function countByStatus(report, status) {
  var count = report.filter(function (entry) {
    return entry.status === status;
  }).length;
  return report.length === 0 ? '0' : count + ' (' + Math.round(count / report.length * 10000) / 100 + '%)';
}

function escapeXML(value) {
  return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;');
}

function asText(report, showSummary, filter) {
  var lines = report.filter(filter).map(function (entry) {
    return entry.status + '\t' + entry.file;
  });

  if (showSummary) {
    return lines.concat(['@flow ' + countByStatus(report, 'flow'), '@flow strict ' + countByStatus(report, 'flow strict'), '@flow weak ' + countByStatus(report, 'flow weak'), 'no flow ' + countByStatus(report, 'no flow'), 'Total Files ' + String(report.length)]);
  } else {
    return lines;
  }
}

function asHTMLTable(report, showSummary, filter) {
  var summaryFooter = ['<tfoot>', htmlPair('@flow', countByStatus(report, 'flow')), htmlPair('@flow strict', countByStatus(report, 'flow strict')), htmlPair('@flow weak', countByStatus(report, 'flow weak')), htmlPair('no flow', countByStatus(report, 'no flow')), htmlPair('Total Files', String(report.length)), '</tfoot>'];

  return ['<table>'].concat(_toConsumableArray(showSummary ? summaryFooter : []), ['<tbody>'], _toConsumableArray(report.filter(filter).map(function (entry) {
    return ['<tr data-status="' + entry.status + '">', '<td>' + entry.status + '</td>', '<td>' + escapeXML(entry.file) + '</td>', '</tr>'].join("\n");
  })), ['</tbody>', '</table>']);
}

function asCSV(report, showSummary, filter) {
  var lines = report.filter(filter).map(function (entry) {
    return [JSON.stringify(entry.status), JSON.stringify(entry.file)].join(', ');
  });

  if (showSummary) {
    return lines.concat(['"@flow", "' + countByStatus(report, 'flow') + '"', '"@flow strict", "' + countByStatus(report, 'flow strict') + '"', '"@flow weak", "' + countByStatus(report, 'flow weak') + '"', '"no flow", "' + countByStatus(report, 'no flow') + '"', '"Total Files", "' + String(report.length) + '"']);
  } else {
    return lines;
  }
}

function asJUnit(report, filter) {
  var date = new Date().toISOString();
  var host = _os2.default.hostname();
  var tests = report.length;
  var failures = report.length - report.filter(function (entry) {
    return entry.status === 'flow';
  }).length;

  return ['<testsuite name="flow-annotation-check" timestamp="' + date + '" time="0" hostname="' + host + '" tests="' + tests + '" failures="' + failures + '" errors="0">'].concat(_toConsumableArray(report.filter(filter).map(function (entry) {
    return entry.status === 'flow' ? '<testcase classname="' + escapeXML(entry.file) + '" name="HasFlowStatus" time="0" />' : ['<testcase classname="' + escapeXML(entry.file) + '" name="HasFlowStatus" time="0">', '<failure type="' + (entry.status === 'no flow' ? 'HasNoneStatus' : 'HasFlowWeakStatus') + '">', 'Status is "' + entry.status + '"', '</failure>', '</testcase>'].join('');
  })), ['</testsuite>']);
}