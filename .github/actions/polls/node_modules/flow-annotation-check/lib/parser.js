'use strict';

// $FlowFixMe: package.json is untyped

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getParser;

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _argparse = require('argparse');

var _types = require('./types');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function printDefault(value) {
  return '(default: `' + JSON.stringify(value) + '`)';
}function getParser() {
  var parser = new _argparse.ArgumentParser({
    addHelp: true,
    version: _package2.default.version
  });

  parser.addArgument(['-f', '--flow-path'], {
    action: 'store',
    help: 'The path to the flow command. ' + printDefault(_types.DEFAULT_FLAGS.flow_path)
  });
  parser.addArgument(['-o', '--output'], {
    action: 'store',
    help: 'Output format for status/filename pairs. ' + printDefault(_types.DEFAULT_FLAGS.output) + ' ',
    choices: _types.OutputFormats
  });
  parser.addArgument(['--show-summary'], {
    action: 'storeTrue',
    help: 'Include summary data. Does not apply to saved file output or jUnit output. ' + printDefault(_types.DEFAULT_FLAGS.show_summary) + ' '
  });
  parser.addArgument(['--summary-only'], {
    action: 'storeTrue',
    help: 'Unused. Switch to --show-summary instead.'
  });
  parser.addArgument(['--list-files'], {
    action: 'store',
    help: 'Filter the list of files based on the reported status. Use \'--allow-weak\' to control when flow-weak files are included or excluded from the \'flow\' or \'noflow\' checks. ' + printDefault(_types.DEFAULT_FLAGS.list_files) + ' ',
    choices: _types.VisibleStatusTypes
  });
  parser.addArgument(['--html-file'], {
    action: 'store',
    help: 'Save the html table output directly into HTML_FILE. ' + printDefault(_types.DEFAULT_FLAGS.html_file) + ' '
  });
  parser.addArgument(['--csv-file'], {
    action: 'store',
    help: 'Save CSV output directly into CSV_FILE. ' + printDefault(_types.DEFAULT_FLAGS.csv_file) + ' '
  });
  parser.addArgument(['--junit-file'], {
    action: 'store',
    help: 'Save jUnit output directly into JUNIT_FILE. ' + printDefault(_types.DEFAULT_FLAGS.junit_file) + ' '
  });
  parser.addArgument(['-a', '--absolute'], {
    action: 'storeTrue',
    help: 'Report absolute path names. ' + printDefault(_types.DEFAULT_FLAGS.absolute)
  });
  parser.addArgument(['--allow-weak'], {
    action: 'storeTrue',
    help: 'Consider `@flow weak` as a accepable annotation. See https://flowtype.org/docs/existing.html#weak-mode for reasons why this should only be used temporarily. ' + printDefault(_types.DEFAULT_FLAGS.allow_weak)
  });
  parser.addArgument(['-i', '--include'], {
    action: 'append',
    help: 'Glob for files to include. Can be set multiple times. ' + printDefault(_types.DEFAULT_FLAGS.include)
  });
  parser.addArgument(['-x', '--exclude'], {
    action: 'append',
    help: 'Glob for files to exclude. Can be set multiple times. ' + printDefault(_types.DEFAULT_FLAGS.exclude)
  });
  parser.addArgument(['--validate'], {
    action: 'storeTrue',
    help: 'Run in validation mode. This injects errors into globbed files and checks the flow-annotation status'
  });
  parser.addArgument(['root'], {
    defaultValue: '.',
    help: 'The root directory to glob files from. ' + printDefault(_types.DEFAULT_FLAGS.root),
    nargs: '?'
  });

  return parser;
}