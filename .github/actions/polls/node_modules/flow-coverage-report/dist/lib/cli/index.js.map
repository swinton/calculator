{"version":3,"sources":["../../../src/lib/cli/index.js"],"names":["exports","run","args","process","argv","err","console","error","message","stack","exit","concurrentFiles","flowCommandPath","globExcludePatterns","excludeGlob","globIncludePatterns","includeGlob","outputDir","projectDir","reportTypes","type","threshold","htmlTemplateOptions","catch","then","coverageSummaryData","percent"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEAA,QAAQC,GAAR,GAAc,YAAM;AAClB,MAAIC,OAAO,oBAAYC,QAAQC,IAApB,CAAX;;AAEA,MAAI;AACFF,WAAO,wBAAWA,IAAX,CAAP;AACA,gCAAeA,IAAf;AACD,GAHD,CAGE,OAAOG,GAAP,EAAY;AACZ,QAAIA,iCAAJ,EAA+B;AAC7BC,cAAQC,KAAR,CAAc,sBAAd,EAAsCF,IAAIG,OAA1C;AACD,KAFD,MAEO;AACLF,cAAQC,KAAR,CAAc,2BAA2BF,GAA3B,GAAiC,GAAjC,GAAuCA,IAAII,KAAzD;AACD;AACDN,YAAQO,IAAR,CAAa,GAAb,EANY,CAMO;AACpB;;AAED,qBAA2B;AACzBC,qBAAiBT,KAAKS,eADG;AAEzBC,qBAAiBV,KAAKU,eAFG;AAGzBC,yBAAqBX,KAAKY,WAHD;AAIzBC,yBAAqBb,KAAKc,WAJD;AAKzBC,eAAWf,KAAKe,SALS;AAMzBC,gBAAYhB,KAAKgB,UANQ;AAOzBC,iBAAajB,KAAKkB,IAPO;AAQzBC,eAAWnB,KAAKmB,SARS;AASzBC,yBAAqBpB,KAAKoB;AATD,GAA3B,EAUGC,KAVH,CAUS,eAAO;AACdjB,YAAQC,KAAR,CAAc,kDAAkDF,GAAlD,GAAwD,GAAxD,GAA8DA,IAAII,KAAhF;AACAN,YAAQO,IAAR,CAAa,GAAb,EAFc,CAEK;AACpB,GAbD,EAaGc,IAbH,CAaQ,gBAA2B;AAAA;AAAA,QAAzBC,mBAAyB;;AAAA,QAC1BC,OAD0B,GACJD,mBADI,CAC1BC,OAD0B;AAAA,QACjBL,SADiB,GACJI,mBADI,CACjBJ,SADiB;;AAEjC,QAAIK,UAAUL,SAAd,EAAyB;AACvBf,cAAQC,KAAR,oBACmBmB,OADnB,0CAC+DL,SAD/D;AAGAlB,cAAQO,IAAR,CAAa,CAAb,EAJuB,CAIN;AAClB;AACF,GArBD;AAsBD,CArCD","file":"index.js","sourcesContent":["import generateFlowCoverageReport from '../../lib';\nimport processArgv from './args';\nimport {loadConfig, validateConfig, UsageError} from './config';\n\nexports.run = () => {\n  let args = processArgv(process.argv);\n\n  try {\n    args = loadConfig(args);\n    validateConfig(args);\n  } catch (err) {\n    if (err instanceof UsageError) {\n      console.error('Configuration error:', err.message);\n    } else {\n      console.error('Unexpected exception: ' + err + ' ' + err.stack);\n    }\n    process.exit(255); // eslint-disable-line unicorn/no-process-exit\n  }\n\n  generateFlowCoverageReport({\n    concurrentFiles: args.concurrentFiles,\n    flowCommandPath: args.flowCommandPath,\n    globExcludePatterns: args.excludeGlob,\n    globIncludePatterns: args.includeGlob,\n    outputDir: args.outputDir,\n    projectDir: args.projectDir,\n    reportTypes: args.type,\n    threshold: args.threshold,\n    htmlTemplateOptions: args.htmlTemplateOptions\n  }).catch(err => {\n    console.error('Error while generating Flow Coverage Report: ' + err + ' ' + err.stack);\n    process.exit(255); // eslint-disable-line unicorn/no-process-exit\n  }).then(([coverageSummaryData]) => {\n    const {percent, threshold} = coverageSummaryData;\n    if (percent < threshold) {\n      console.error(\n        `Flow Coverage ${percent}% is below the required threshold ${threshold}%`\n      );\n      process.exit(2); // eslint-disable-line unicorn/no-process-exit\n    }\n  });\n};\n"]}