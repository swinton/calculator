{"version":3,"sources":["../../../src/lib/cli/args.js"],"names":["processArgv","examples","appName","argv","basename","split","usage","help","alias","version","name","option","type","coerce","value","slice","resolve","describe","flowCommandPath","choices","join","projectDir","excludeGlob","options","threshold","outputDir","concurrentFiles","check","_","length","Error","epilogue"],"mappings":";;;;;kBAqBwBA,W;;AArBxB;;;;AACA;;;;AAEA;;;;AAEA;;;;AAEA,IAAMC,WAAW,SAAXA,QAAW;AAAA,+BAGbC,OAHa,6BAIbA,OAJa,uEAKbA,OALa,yDAMbA,OANa,sEAObA,OAPa;AAAA,CAAjB;;AAce,SAASF,WAAT,CAAqBG,IAArB,EAA2B;AACxC,MAAMD,UAAU,eAAKE,QAAL,CAAcD,KAAK,CAAL,CAAd,EAAuBE,KAAvB,CAA6B,GAA7B,EAAkC,CAAlC,CAAhB;;AAEA,SAAO,qBAAMF,IAAN,EAAYG,KAAZ,CAAkB,yCAAlB,EACJC,IADI,CACC,GADD,EAEJC,KAFI,CAEE,GAFF,EAEO,MAFP,EAGJC,OAHI,CAGI;AAAA,WAAM,kBAAIC,IAAJ,GAAW,GAAX,GAAiB,kBAAID,OAA3B;AAAA,GAHJ,EAIJD,KAJI,CAIE,GAJF,EAIO;AACZ;AALK,IAMJG,MANI,CAMG,mBANH,EAMwB;AAC3BH,WAAO,GADoB;AAE3BI,UAAM,QAFqB;AAG3BC,YAAQ;AAAA,aAASC,MAAMC,KAAN,CAAY,CAAZ,EAAe,CAAf,MAAsB,IAAtB,GAA6B,eAAKC,OAAL,CAAaF,KAAb,CAA7B,GAAmDA,KAA5D;AAAA,KAHmB;AAI3BG,6DAAuD,sBAAcC,eAArE;AAJ2B;AAM7B;AAZK,IAaJP,MAbI,CAaG,MAbH,EAaW;AACdH,WAAO,GADO;AAEdI,UAAM,QAFQ;AAGdO,aAAS,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CAHK;AAIdF,iEAA2D,sBAAcL,IAAd,CAAmBQ,IAAnB,CAAwB,IAAxB,CAA3D;AAJc;AAMhB;AAnBK,IAoBJT,MApBI,CAoBG,aApBH,EAoBkB;AACrBH,WAAO,GADc;AAErBI,UAAM,QAFe;AAGrBK,6DAAuD,sBAAcI,UAArE;AAHqB;AAKvB;AAzBK,IA0BJV,MA1BI,CA0BG,cA1BH,EA0BmB;AACtBH,WAAO,GADe;AAEtBI,UAAM,QAFgB;AAGtBK,cAAU;AAHY,GA1BnB,EA+BJN,MA/BI,CA+BG,cA/BH,EA+BmB;AACtBH,WAAO,GADe;AAEtBI,UAAM,QAFgB;AAGtBK,cAAU,0EACS,sBAAcK,WADvB;AAHY,GA/BnB,EAqCJC,OArCI,CAqCI,WArCJ,EAqCiB;AACpBX,UAAM,QADc;AAEpBK,uEAAiE,sBAAcO,SAA/E;AAFoB;AAItB;AAzCK,IA0CJb,MA1CI,CA0CG,YA1CH,EA0CiB;AACpBH,WAAO,GADa;AAEpBI,UAAM,QAFc;AAGpBK,kGAA4F,sBAAcQ,SAA1G;AAHoB;AAKtB;AA/CK,IAgDJd,MAhDI,CAgDG,kBAhDH,EAgDuB;AAC1BH,WAAO,GADmB;AAE1BI,UAAM,QAFoB;AAG1BK,2FAAqF,sBAAcS,eAAnG;AAH0B;AAK5B;AArDK,IAsDJf,MAtDI,CAsDG,WAtDH,EAsDgB;AACnBC,UAAM,SADa;AAEnBK,cAAU;AAFS,GAtDhB,EA0DJN,MA1DI,CA0DG,QA1DH,EA0Da;AAChBC,UAAM,QADU;AAEhBK,cAAU;AAFM,GA1Db,EA8DJU,KA9DI,CA8DE,gBAAQ;AACb,QAAIxB,KAAKyB,CAAL,CAAOC,MAAP,GAAgB,CAApB,EAAuB;AACrB,YAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,WAAO,IAAP;AACD,GApEI,EAqEJC,QArEI,CAqEK9B,SAASC,OAAT,CArEL,EAsEJC,IAtEH;AAuED","file":"args.js","sourcesContent":["import path from 'path';\nimport yargs from 'yargs';\n\nimport npm from '../../../package';\n\nimport {defaultConfig} from './config';\n\nconst examples = appName => `\nExamples:\n\n  ${appName} -i \"src/**/*.js\"\n  ${appName} -p /path/to/project -i \"src/**/*.js\" -x \"src/test/**/*.js\"\n  ${appName} -t html -p /path/to/project -i \"src/**/*.js\"\n  ${appName} -t html -t json -t text /path/to/project -i \"src/**/*.js\"\n  ${appName} -i \"src/**/*.js\" -c 5\n\nFor more informations:\n\n  https://github.com/rpl/flow-coverage-report\n`;\n\nexport default function processArgv(argv) {\n  const appName = path.basename(argv[1]).split('.')[0];\n\n  return yargs(argv).usage('Usage: $0 COMMAND PROJECTDIR [...globs]')\n    .help('h')\n    .alias('h', 'help')\n    .version(() => npm.name + ' ' + npm.version)\n    .alias('v', 'version')\n    // -f flow-command-path\n    .option('flow-command-path', {\n      alias: 'f',\n      type: 'string',\n      coerce: value => value.slice(0, 2) === './' ? path.resolve(value) : value,\n      describe: `path to the flow executable (defaults to \"${defaultConfig.flowCommandPath}\")`\n    })\n    // --type text\n    .option('type', {\n      alias: 't',\n      type: 'choice',\n      choices: ['html', 'json', 'text'],\n      describe: `format of the generated reports (defaults to \"${defaultConfig.type.join(', ')}\")`\n    })\n    // --project-dir \"/project/dir/path\"\n    .option('project-dir', {\n      alias: 'p',\n      type: 'string',\n      describe: `select the project dir path (defaults to \"${defaultConfig.projectDir}\")`\n    })\n    // --include-glob \"src/**/*.js\"\n    .option('include-glob', {\n      alias: 'i',\n      type: 'string',\n      describe: 'include the files selected by the specified glob'\n    })\n    .option('exclude-glob', {\n      alias: 'x',\n      type: 'string',\n      describe: 'exclude the files selected by the specified glob ' +\n        `(defaults to \"${defaultConfig.excludeGlob}\")`\n    })\n    .options('threshold', {\n      type: 'number',\n      describe: `the minimum coverage percent requested (defaults to ${defaultConfig.threshold})`\n    })\n    // --output-dir \"/var/public_html/flow-coverage\"\n    .option('output-dir', {\n      alias: 'o',\n      type: 'string',\n      describe: `output html or json files to this folder relative to project-dir (defaults to \"${defaultConfig.outputDir}\")`\n    })\n    // --concurrent-files 5\n    .option('concurrent-files', {\n      alias: 'c',\n      type: 'number',\n      describe: `the maximum number of files concurrently submitted to flow (defaults to ${defaultConfig.concurrentFiles})`\n    })\n    // --no-config\n    .option('no-config', {\n      type: 'boolean',\n      describe: 'do not load any config file from the project dir'\n    })\n    .option('config', {\n      type: 'string',\n      describe: 'file path of the config file to load'\n    })\n    .check(argv => {\n      if (argv._.length > 2) {\n        throw new Error('ERROR: The include glob needs to be quoted.');\n      }\n\n      return true;\n    })\n    .epilogue(examples(appName))\n    .argv;\n}\n"]}