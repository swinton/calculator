{"version":3,"sources":["../../../src/lib/cli/config.js"],"names":["loadConfig","validateConfig","UsageError","message","toArray","Array","isArray","value","defaultConfig","type","flowCommandPath","projectDir","resolve","process","cwd","excludeGlob","threshold","outputDir","concurrentFiles","noConfig","htmlTemplateOptions","autoHeightSource","showMeterBar","getProjectDir","config","args","Object","keys","key","includeGlob","filePath","fileRawData","readFileSync","fileConfigData","env","VERBOSE","console","log","packageJSONPath","join","pkg","require","err","error","projectConfigPath","projectConfigRaw","projectConfigData","raiseErrorIfArray","msg","preventDuplicatedOptions","option","length","glob"],"mappings":";;;;;;;;;;;;;;;QAqCgBA,U,GAAAA,U;QA2FAC,c,GAAAA,c;;AAhIhB;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEaC,U,WAAAA,U,GACX,oBAAYC,OAAZ,EAAqB;AAAA;;AACnB,OAAKA,OAAL,GAAeA,OAAf;AACD,C;;AAGH,IAAMC,UAAU,SAAVA,OAAU;AAAA,SAASC,MAAMC,OAAN,CAAcC,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAAxC;AAAA,CAAhB;;AAEO,IAAMC,wCAAgB;AAC3BC,QAAM,CAAC,MAAD,CADqB;AAE3BC,mBAAiB,MAFU;AAG3BC,cAAY,eAAKC,OAAL,CAAaC,QAAQC,GAAR,EAAb,CAHe;AAI3BC,eAAa,CAAC,iBAAD,CAJc;AAK3BC,aAAW,EALgB;AAM3BC,aAAW,iBANgB;AAO3BC,mBAAiB,CAPU;AAQ3BC,YAAU,KARiB;AAS3BC,uBAAqB;AACnBC,sBAAkB,IADC;AAEnBC,kBAAc;AAFK;AATM,CAAtB;;AAeP,IAAMC,gBAAgB,SAAhBA,aAAgB;AAAA,SAAU,2BAAKf,aAAL,EAAuBgB,MAAvB,EAAgCb,UAA1C;AAAA,CAAtB;;AAEA;;;;;;;AAOO,SAASX,UAAT,CAAoByB,IAApB,EAA0B;AAC/B;AAD+B;AAAA;AAAA;;AAAA;AAE/B,yBAAkBC,OAAOC,IAAP,CAAYF,IAAZ,CAAlB,8HAAqC;AAAA,UAA1BG,GAA0B;;AACnC,UAAI,OAAOH,KAAKG,GAAL,CAAP,KAAqB,WAAzB,EAAsC;AACpC,eAAOH,KAAKG,GAAL,CAAP;AACD;AACF;AAN8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQ/B,MAAIH,KAAKN,QAAT,EAAmB;AACjB,sCACKX,aADL,EAEKiB,IAFL;AAID;;AAED,MAAIA,KAAKI,WAAT,EAAsB;AACpBJ,SAAKI,WAAL,GAAmBzB,QAAQqB,KAAKI,WAAb,CAAnB;AACD;;AAED,MAAIJ,KAAKD,MAAT,EAAiB;AACf,QAAMM,WAAW,eAAKlB,OAAL,CAAaa,KAAKD,MAAlB,CAAjB;AACA,QAAMO,cAAc,aAAGC,YAAH,CAAgBF,QAAhB,CAApB;AACA,QAAMG,iBAAiB,yBAAU,sCAAqBF,WAArB,CAAV,CAAvB;;AAEA,QAAIlB,QAAQqB,GAAR,CAAYC,OAAhB,EAAyB;AACvBC,cAAQC,GAAR,CAAY,yBAAZ,EAAuCP,QAAvC,EAAiDG,cAAjD;AACD;;AAED,sCACKzB,aADL,EAEKyB,cAFL,EAGKR,IAHL;AAKD;;AAED,MAAIa,wBAAJ;;AAEA,MAAI;AACFA,sBAAkB,eAAK1B,OAAL,CAAa,eAAK2B,IAAL,CAAUhB,cAAcE,IAAd,CAAV,EAA+B,cAA/B,CAAb,CAAlB;AACA,QAAMe,MAAMC,QAAQH,eAAR,CAAZ,CAFE,CAEoC;AACtC,QAAIE,IAAI,sBAAJ,CAAJ,EAAiC;AAC/B,UAAI3B,QAAQqB,GAAR,CAAYC,OAAhB,EAAyB;AACvBC,gBAAQC,GAAR,CAAY,iCAAZ,EAA+CG,IAAI,sBAAJ,CAA/C;AACD;;AAED,wCACKhC,aADL,EAEKgC,IAAI,sBAAJ,CAFL,EAGKf,IAHL;AAKD;AACF,GAdD,CAcE,OAAOiB,GAAP,EAAY;AACZ,QAAI7B,QAAQqB,GAAR,CAAYC,OAAhB,EAAyB;AACvBC,cAAQO,KAAR,CAAc,iDAAd,EAAiEL,eAAjE,EAAkFI,GAAlF;AACD;AACF;;AAED,MAAIE,0BAAJ;;AAEA,MAAI;AACFA,wBAAoB,eAAKhC,OAAL,CAAa,eAAK2B,IAAL,CAAUhB,cAAcE,IAAd,CAAV,EAA+B,4BAA/B,CAAb,CAApB;AACA,QAAMoB,mBAAmB,aAAGb,YAAH,CAAgBY,iBAAhB,CAAzB;AACA,QAAME,oBAAoB,yBAAU,sCAAqBD,gBAArB,CAAV,CAA1B;;AAEA,QAAIhC,QAAQqB,GAAR,CAAYC,OAAhB,EAAyB;AACvBC,cAAQC,GAAR,CAAY,gCAAZ,EAA8CO,iBAA9C,EAAiEE,iBAAjE;AACD;;AAED,sCACKtC,aADL,EAEKsC,iBAFL,EAGKrB,IAHL;AAKD,GAdD,CAcE,OAAOiB,GAAP,EAAY;AACZ,QAAI7B,QAAQqB,GAAR,CAAYC,OAAhB,EAAyB;AACvBC,cAAQO,KAAR,CAAc,iCAAd,EAAiDC,iBAAjD,EAAoEF,GAApE;AACD;AACF;;AAED,oCACKlC,aADL,EAEKiB,IAFL;AAID;;AAED;;;;;;AAMO,SAASxB,cAAT,CAAwBwB,IAAxB,EAA8B;AACnC,WAASsB,iBAAT,CAA2BxC,KAA3B,EAAkCyC,GAAlC,EAAuC;AACrC,QAAI3C,MAAMC,OAAN,CAAcC,KAAd,CAAJ,EAA0B;AACxB,YAAM,IAAIL,UAAJ,sBAAkC8C,GAAlC,wBAAN;AACD;AACF;;AAED,MAAMC,2BAA2B;AAC/BtC,gBAAY,aADmB;AAE/BM,eAAW,YAFoB;AAG/BD,eAAW,WAHoB;AAI/BN,qBAAiB,cAJc;AAK/BQ,qBAAiB;AALc,GAAjC;;AAPmC;AAAA;AAAA;;AAAA;AAenC,0BAAqBQ,OAAOC,IAAP,CAAYsB,wBAAZ,CAArB,mIAA4D;AAAA,UAAjDC,MAAiD;;AAC1D,UAAMF,MAAMC,yBAAyBC,MAAzB,CAAZ;AACAH,wBAAkBtB,KAAKyB,MAAL,CAAlB,EAAgCF,GAAhC;AACD;AAlBkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,MAoB5BnB,WApB4B,GAoBbJ,IApBa,CAoB5BI,WApB4B;;AAqBnC,MAAI,CAACA,WAAD,IAAgBA,YAAYsB,MAAZ,KAAuB,CAAvC,IAA4C,CAACtB,YAAY,CAAZ,CAAjD,EAAiE;AAC/D,UAAM,IAAI3B,UAAJ,CAAe,oCAAf,CAAN;AACD;;AAvBkC;AAAA;AAAA;;AAAA;AAyBnC,0BAAmB2B,WAAnB,mIAAgC;AAAA,UAArBuB,IAAqB;;AAC9B,UAAIA,KAAK,CAAL,MAAY,GAAhB,EAAqB;AACnB,cAAM,IAAIlD,UAAJ,CAAe,gDAAf,CAAN;AACD;AACF;AA7BkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA+BnC,SAAOuB,IAAP;AACD","file":"config.js","sourcesContent":["import path from 'path';\nimport fs from 'fs';\nimport parseJSON from 'parse-json';\nimport stripJSONComments from 'strip-json-comments';\n\nexport class UsageError {\n  constructor(message) {\n    this.message = message;\n  }\n}\n\nconst toArray = value => Array.isArray(value) ? value : [value];\n\nexport const defaultConfig = {\n  type: ['text'],\n  flowCommandPath: 'flow',\n  projectDir: path.resolve(process.cwd()),\n  excludeGlob: ['node_modules/**'],\n  threshold: 80,\n  outputDir: './flow-coverage',\n  concurrentFiles: 1,\n  noConfig: false,\n  htmlTemplateOptions: {\n    autoHeightSource: true,\n    showMeterBar: false\n  }\n};\n\nconst getProjectDir = config => ({...defaultConfig, ...config}).projectDir;\n\n/**\n * Try to load configuration parameters from the project dir if the following order:\n * - do not load any config if --no-config option is specified\n * - from the package.json \"flow-coverage-report\" property, if any\n * - from a .flow-coverage-report.json, if any\n * - from the --config cli parameter, if any\n */\nexport function loadConfig(args) {\n  // Remove any undefined property from the yargs object.\n  for (const key of Object.keys(args)) {\n    if (typeof args[key] === 'undefined') {\n      delete args[key];\n    }\n  }\n\n  if (args.noConfig) {\n    return {\n      ...defaultConfig,\n      ...args\n    };\n  }\n\n  if (args.includeGlob) {\n    args.includeGlob = toArray(args.includeGlob);\n  }\n\n  if (args.config) {\n    const filePath = path.resolve(args.config);\n    const fileRawData = fs.readFileSync(filePath);\n    const fileConfigData = parseJSON(stripJSONComments(`${fileRawData}`));\n\n    if (process.env.VERBOSE) {\n      console.log('Loaded config from file', filePath, fileConfigData);\n    }\n\n    return {\n      ...defaultConfig,\n      ...fileConfigData,\n      ...args\n    };\n  }\n\n  let packageJSONPath;\n\n  try {\n    packageJSONPath = path.resolve(path.join(getProjectDir(args), 'package.json'));\n    const pkg = require(packageJSONPath); // eslint-disable-line import/no-dynamic-require\n    if (pkg['flow-coverage-report']) {\n      if (process.env.VERBOSE) {\n        console.log('Loaded config from package.json', pkg['flow-coverage-report']);\n      }\n\n      return {\n        ...defaultConfig,\n        ...pkg['flow-coverage-report'],\n        ...args\n      };\n    }\n  } catch (err) {\n    if (process.env.VERBOSE) {\n      console.error('Unable to load config from project package.json', packageJSONPath, err);\n    }\n  }\n\n  let projectConfigPath;\n\n  try {\n    projectConfigPath = path.resolve(path.join(getProjectDir(args), '.flow-coverage-report.json'));\n    const projectConfigRaw = fs.readFileSync(projectConfigPath);\n    const projectConfigData = parseJSON(stripJSONComments(`${projectConfigRaw}`));\n\n    if (process.env.VERBOSE) {\n      console.log('Loaded config from project dir', projectConfigPath, projectConfigData);\n    }\n\n    return {\n      ...defaultConfig,\n      ...projectConfigData,\n      ...args\n    };\n  } catch (err) {\n    if (process.env.VERBOSE) {\n      console.error('Unable to load config from file', projectConfigPath, err);\n    }\n  }\n\n  return {\n    ...defaultConfig,\n    ...args\n  };\n}\n\n/**\n * Validate the arguments collected from the command line and config files and\n * ensure that it is a valid FlowCoverageReportOptions object (as described by its\n * flow type declaration in the \"src/lib/index.js module\")\n */\n\nexport function validateConfig(args) {\n  function raiseErrorIfArray(value, msg) {\n    if (Array.isArray(value)) {\n      throw new UsageError(`ERROR: Only one ${msg} can be specified.`);\n    }\n  }\n\n  const preventDuplicatedOptions = {\n    projectDir: 'project dir',\n    outputDir: 'output dir',\n    threshold: 'threshold',\n    flowCommandPath: 'flow command',\n    concurrentFiles: '--concurrent-files option'\n  };\n\n  for (const option of Object.keys(preventDuplicatedOptions)) {\n    const msg = preventDuplicatedOptions[option];\n    raiseErrorIfArray(args[option], msg);\n  }\n\n  const {includeGlob} = args;\n  if (!includeGlob || includeGlob.length === 0 || !includeGlob[0]) {\n    throw new UsageError('ERROR: No glob has been specified.');\n  }\n\n  for (const glob of includeGlob) {\n    if (glob[0] === '!') {\n      throw new UsageError('ERROR: Only include glob syntax are supported.');\n    }\n  }\n\n  return args;\n}\n"]}